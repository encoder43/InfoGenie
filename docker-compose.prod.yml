# =============================================================================
# Production Docker Compose for InfoGenie RAG Application
# For local testing and production deployment
# =============================================================================

version: '3.8'

services:
  infogenie-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: infogenie-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - HF_HOME=/app/models
      - TRANSFORMERS_CACHE=/app/models
      - SENTENCE_TRANSFORMERS_HOME=/app/models
      - PORT=8000
      - HOST=0.0.0.0
    volumes:
      # Persistent storage for documents and database
      - infogenie_docs:/app/docs
      - infogenie_db:/app/db
      - infogenie_logs:/app/logs
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: infogenie-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - infogenie-backend
    profiles:
      - with-nginx

volumes:
  infogenie_docs:
    driver: local
  infogenie_db:
    driver: local
  infogenie_logs:
    driver: local

networks:
  default:
    name: infogenie-network
